// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  username        String
  email           String            @unique
  password        String
  role            UserRole
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  movies          Movie[]
  ReviewAndRating ReviewAndRating[]
  Feedback        Feedback[]
  WatchList       WatchList[]

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movies    Movie[]

  @@map("category")
}

model Trailer {
  id          String   @id @default(uuid())
  title       String
  image       String
  trailerLink String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  movie       Movie?

  @@map("trailer")
}

model Movie {
  id              String            @id @default(uuid())
  title           String
  creators        String
  description     Status
  status          Status            @default(upcoming)
  episode         Int?
  video           Int?
  photo           Int?
  banner          String?
  movieLink       String?
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  trailerId       String            @unique
  trailer         Trailer           @relation(fields: [trailerId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ReviewAndRating ReviewAndRating[]
  WatchList       WatchList[]

  @@map("movie")
}

model WatchList {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@map("watchlist")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  rating    Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id])

  @@map("review_and_rating")
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedback")
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faq")
}

enum UserRole {
  admin
  customer
}

enum Status {
  upcoming
  inProgress
}
